

Mnist dataset solved using architecture:



Target:
99.4% validation accuracy
Less than 20k Parameters
You can use anything from above you want. 
Less than 20 Epochs
No fully connected layer



Layers:
        super(Net, self).__init__()
       
        drop_prob = 0.15
        self.conv1 = nn.Sequential(
            nn.Conv2d(1,16,3),                     
            nn.ReLU(),
            nn.BatchNorm2d(16),
            nn.Dropout(drop_prob)
        )                             # ## 28 > 26 RF:3     

        self.conv2 = nn.Sequential(
            nn.Conv2d(16, 16, 3),
            nn.ReLU(),
            nn.BatchNorm2d(16),
            nn.Dropout(drop_prob)
        )                             ## 26 > 24 RF: 5    

        self.conv3 = nn.Sequential(
            nn.Conv2d(16, 16, 3),
            nn.ReLU(),
            nn.BatchNorm2d(16),
            nn.Dropout(drop_prob)
        )                            ## 24 > 22 RF: 7   

        self.pool1 = nn.MaxPool2d(2, 2) ## 22 > 11 RF: 8  

        self.conv4 = nn.Sequential(
            nn.Conv2d(16, 32, 3),
            nn.ReLU(),
            nn.BatchNorm2d(32),
            nn.Dropout(drop_prob)
        )                              ## 11 > 9 RF: 12

        self.conv5 = nn.Sequential(
            nn.Conv2d(32, 32, 3),
            nn.ReLU(),
            nn.BatchNorm2d(32),
            nn.Dropout(drop_prob)
        )                                ## 9 > 7 RF: 16

        self.conv6 = nn.Sequential(
            nn.Conv2d(32, 10, 1),
            nn.ReLU(),
            nn.BatchNorm2d(10),
            nn.Dropout(drop_prob)
        )                                ## 7 > 5 RF: 20

        self.out = nn.AdaptiveAvgPool2d(1)   ## 5 > 1 RF: 28
